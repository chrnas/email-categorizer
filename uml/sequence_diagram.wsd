@startuml
actor Client
participant "CreateEmailClassifierCommand" as Command
participant "EmailClassifierFactory" as Factory
participant "DatasetLoader" as Loader
participant "EmailClassifierFacade" as EmailClassifier
participant "DataProcessor" as Processor
participant "EmbeddingsFactory" as EmbeddingsFactory
participant "BaseEmbeddings" as BaseEmbeddings
participant "ModelFactory" as ModelFactory
participant "ContextClassifier" as ContextClassifier
participant "StatCollector" as StatCollector

Client -> Command : handle_input(path, embedding, model, name)
Command -> Loader : read_data(path)
Loader --> Command : Return df
Command -> Loader : renameColumns(df)
Loader --> Command : Return df
Command -> Factory : create_email_classifier(df, embedding, model, name)
Factory -> Processor : process(df)
Processor --> Factory : Return df
Factory -> EmbeddingsFactory : create_embeddings(embedding)
EmbeddingsFactory --> Factory : Return feature_engineer
Factory -> BaseEmbeddings : create_training_embeddings(df)
BaseEmbeddings --> Factory : Return X
Factory -> ModelFactory : create_model(model)
ModelFactory --> Factory : Return model
Factory -> ContextClassifier : subscribe(StatCollector)
Factory -> ContextClassifier : subscribe(ResultDisplayer)
Factory -> ContextClassifier : choose_strat(model)
Factory -> ContextClassifier : train()
Factory -> ContextClassifier : predict()
Factory -> ContextClassifier : classification_report()
ContextClassifier -> ContextClassifier : notify(event_type, report)
ContextClassifier -> StatCollector : update(event_type, report)
Factory --> Command: Return EmailClassifierFacade
Command -> Command : insert(0, EmailClassifierFacade)
@enduml 